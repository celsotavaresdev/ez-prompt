#!/usr/bin/env sh

# ------------------------------------------------------------------------------
# VARS
FG_RED='\[\e[31m\]'
FG_GREEN='\[\e[32m\]'
FG_PURPLE='\[\e[35m\]'
FG_GRAY='\[\e[37m\]'
FG_WHITE='\[\e[97m\]'
RESET='\[\e[0m\]'

# ------------------------------------------------------------------------------
# FUNCTIONS (UTILS)
is_root() {
    [ "$(id -u)" -eq 0 ]
}

is_container() {
    [ -f /run/.containerenv ]
}

get_container_name() {
    sed -nr 's/^name="(.*)"$/\1/p' /run/.containerenv
}

light_color() {
    _light_color_value=$1
    printf '%s' "$_light_color_value" | sed 's/\[3/\[9/g'
}

dark_color() {
    _dark_color_value=$1
    printf '%s' "$_dark_color_value" | sed 's/m/;2m/g'
}

bright_color() {
    _bright_color_value=$1
    _bright_color_value=$(printf '%s' "$_bright_color_value" | sed 's/m/;1m/g')
    light_color "$_bright_color_value"
}

find_lscolors() {
    _find_lscolors_string=$1
    _find_lscolors_result=$(dircolors -p | grep -oP "^.?$_find_lscolors_string \K([0-9]|[\;])+")
    printf '\[\e[%sm\]' "$_find_lscolors_result"
}

# ------------------------------------------------------------------------------
# FUNCTIONS
primary_color() {
    _primary_color_value=

    if is_container; then
        _primary_color_value=$FG_PURPLE
    elif is_root; then
        _primary_color_value=$FG_RED
    else
        _primary_color_value=$FG_GREEN
    fi

    printf '%s' "$_primary_color_value"
}

user() {
    _user_primary_color=$(primary_color)
    printf '%s\\u%s' "$_user_primary_color" "$RESET"
}

prompt_symbol() {
    _prompt_symbol_value=
    _prompt_symbol_color=$(bright_color "$(primary_color)")

    if is_container; then
        _prompt_symbol_value="â¬¢"
    else
        _prompt_symbol_value="\\$"
    fi

    printf '%s%s%s' "$_prompt_symbol_color" "$_prompt_symbol_value" "$RESET"
}

host() {
    _host_name=
    _host_color=${FG_WHITE}

    if is_container; then
        _host_name=$(get_container_name)
    else
        _host_name="\\h"
    fi

    printf '%s%s%s' "$_host_color" "$_host_name" "$RESET"
}

current_dir() {
    _current_dir_color=

    if [ -h "$(pwd)" ]; then
        _current_dir_color=$(find_lscolors 'LINK')
    else
        _current_dir_color=$(find_lscolors 'DIR')
    fi

    printf '%s\\w%s' "$_current_dir_color" "$RESET"
}

exit_status() {
    _exit_status_code=$?
    _exit_status_value=
    _exit_status_line_feed=
    _exit_status_color=$(dark_color "$FG_GRAY")

    if [ "$_exit_status_code" -ne 0 ]; then
        _exit_status_value="${_exit_status_color}[exit ${_exit_status_code}]"
        _exit_status_line_feed="\n\n"
    else
        _exit_status_line_feed="\n"
    fi

    printf '%s%s%s' "$_exit_status_value" "$_exit_status_line_feed" "$RESET"
}

set_prompt() {
    PS1="$(exit_status)$(user)@$(host) $(current_dir)\n$(prompt_symbol) "
}

# ------------------------------------------------------------------------------
# MAIN
PROMPT_COMMAND=set_prompt